def minimax(board):
    """
    Returns the optimal action for the current player on the board.
    """

    '''
    is_board_terminal = terminal(board)
    player_to_play = player(board)

    if is_board_terminal == True:
        return None
    
    else:
        if player_to_play == "X":
            for action in actions(board):
                lowest_possible_val = -math.inf
                max_player_play = min_value(board)

                if max_player_play > lowest_possible_val:
                    lowest_possible_val = max_player_play
                    action_to_take = action

            return action_to_take

        elif player_to_play == "O":
            #action_to_take = min_value(board)
            for action in actions(board):
                highest_possible_val = math.inf
                min_player_play = max_value(board)

                if min_player_play < highest_possible_val:
                    highest_possible_val = min_player_play
                    action_to_take = action

            return action_to_take
    -----------------------------------------------------------
    if terminal(board):
        return None
    else:
        if player(board) == X:
            value, move = max_value(board)
            return move
        else:
            value, move = min_value(board)
            return move

    '''

    if terminal(board):
        return None
    
    else:
        if player(board) == "X":
            max_player_value, max_player_move = max_value(board)
            return max_player_move

        else:
            min_player_value, min_player_move = min_value(board)
            return min_player_move


def min_value(board):
    '''
    is_board_terminal = terminal(board)

    if is_board_terminal == True:
        return utility(board)
    
    v = math.inf

    for action in actions(board):
        v = min(v, max_value(result(board, action)))
        #min_player_play = max_value(board)

        #if min_player_play < v:
            #v = min_player_play
            #action_to_take = action

    return v
    -----------------------------------------------------

    def min_value(board):
        if terminal(board):
            return utility(board), None

        v = float('inf')
        move = None
        for action in actions(board):
            # v = max(v, min_value(result(board, action)))
            aux, act = max_value(result(board, action))
            if aux < v:
                v = aux
                move = action
                if v == -1:
                    return v, move

        return v, move

    '''

    is_board_terminal = terminal(board)

    if is_board_terminal == True:
        return utility(board)

    v = math.inf
    move = None

    for action in actions(board):
        min_value, min_action_to_take = max_value(result(board, action))

        if min_value < v:
            v = min_value
            move = action

            if v == -1:
                return v, move

    return v, move


def max_value(board):
    '''
    is_board_terminal = terminal(board)

    if is_board_terminal == True:
        return utility(board)
    
    v = -math.inf

    for action in actions(board):
        v = max(v, min_value(result(board, action)))
        #max_player_play = min_value(board)

        #if max_player_play > v:
            #v = max_player_play
            #action_to_take = action

    return v
    ---------------------------------------------------

    if terminal(board):
        return utility(board), None

    v = float('-inf')
    move = None
    for action in actions(board):
        # v = max(v, min_value(result(board, action)))
        aux, act = min_value(result(board, action))
        if aux > v:
            v = aux
            move = action
            if v == 1:
                return v, move

    return v, move
    '''
    is_board_terminal = terminal(board)

    if is_board_terminal == True:
        return utility(board)

    v = -math.inf
    move = None

    for action in actions(board):
        max_value, max_action_to_take = min_value(result(board, action))

        if max_value > v:
            v = max_value
            move = action

            if v == 1:
                return v, move

    return v, move